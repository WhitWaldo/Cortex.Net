<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cortex.Net</name>
    </assembly>
    <members>
        <member name="T:Cortex.Net.ComputedValueOptions`1">
            <summary>
            Options class for the Constructor of <see cref="T:Cortex.Net.Core.ComputedValue`1"/> class.
            </summary>
            <typeparam name="T">The type of the getter / setter.</typeparam>
        </member>
        <member name="M:Cortex.Net.ComputedValueOptions`1.#ctor(System.Func{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cortex.Net.ComputedValueOptions`1"/> class.
            </summary>
            <param name="getter">The getter for the computed value.</param>
            <param name="name">The name of the computed value.</param>
        </member>
        <member name="P:Cortex.Net.ComputedValueOptions`1.Getter">
            <summary>
            Gets the getter function.
            </summary>
        </member>
        <member name="P:Cortex.Net.ComputedValueOptions`1.Setter">
            <summary>
            Gets or sets setter function.
            </summary>
        </member>
        <member name="P:Cortex.Net.ComputedValueOptions`1.Name">
            <summary>
            Gets or sets the name of the computed value.
            </summary>
        </member>
        <member name="P:Cortex.Net.ComputedValueOptions`1.EqualityComparer">
            <summary>
            Gets or sets an optional equality comparer for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:Cortex.Net.ComputedValueOptions`1.Context">
            <summary>
            Gets or sets the context where the computed value operates on (If Any).
            </summary>
        </member>
        <member name="P:Cortex.Net.ComputedValueOptions`1.RequiresReaction">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Cortex.Net.Core.ComputedValue`1"/> requires a reactive context.
            </summary>
        </member>
        <member name="P:Cortex.Net.ComputedValueOptions`1.KeepAlive">
            <summary>
            Gets or sets a value indicating whether the computed value keeps calculating, even when it is not observed.
            </summary>
        </member>
        <member name="T:Cortex.Net.Core.Atom">
            <summary>
            Implements an Atom.
            Atoms can be used to signal Cortex.Net that some observable data source has been observed or changed.
            And Cortex.Net will signal the atom whenever it is used or no longer in use.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.Atom.#ctor(Cortex.Net.ISharedState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cortex.Net.Core.Atom"/> class.
            </summary>
            <param name="sharedState">The shared state where this atom is created on.</param>
            <param name="name">The name for this Atom.</param>
        </member>
        <member name="E:Cortex.Net.Core.Atom.BecomeObserved">
            <summary>
            Event that will fire after the <see cref="T:Cortex.Net.Core.Atom"/> has become observed.
            </summary>
        </member>
        <member name="E:Cortex.Net.Core.Atom.BecomeUnobserved">
            <summary>
            Event that will fire after the observable has become unobserved.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.Atom.Observers">
            <summary>
            Gets the Observers.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.Atom.IsPendingUnobservation">
            <summary>
            Gets or sets a value indicating whether this atom is pending Unobservation.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.Atom.LastAccessedBy">
            <summary>
            Gets or sets the Id of the derivation run that last accessed this observable.
            If this Id equals the <see cref="P:Cortex.Net.IDerivation.RunId"/> of the current derivation
            the dependency is already established.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.Atom.IsBeingObserved">
            <summary>
            Gets or sets a value indicating whether the observable is being observed.
            An observable is being observed when at least one derivation actually accesses its
            value.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.Atom.LowestObserverState">
            <summary>
            Gets or sets the lowest <see cref="T:Cortex.Net.DerivationState"/> on any of it's observers.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.Atom.Name">
            <summary>
            Gets the Name of the <see cref="T:Cortex.Net.Core.Atom"/> instance.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.Atom.SharedState">
            <summary>
            Gets the Shared State of all the nodes in the dependency graph.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.Atom.OnBecomeObserved">
            <summary>
            Method that triggers event <see cref="E:Cortex.Net.Core.Atom.BecomeObserved"/>.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.Atom.OnBecomeUnobserved">
            <summary>
            Method that triggers event <see cref="E:Cortex.Net.Core.Atom.BecomeUnobserved"/>.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.Atom.ReportChanged">
            <summary>
            Invoke this method after this atom has changed to signal Cortex.Net that all its observers should invalidate.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.Atom.ReportObserved">
            <summary>
            Invoke this method to notify Cortex.Net that your atom has been used somehow.
            </summary>
            <returns>Returns true if there is currently a reactive context.</returns>
        </member>
        <member name="M:Cortex.Net.Core.Atom.ToString">
            <summary>
            Returns the name of this <see cref="T:Cortex.Net.Core.Atom"/>.
            </summary>
            <returns>The name of the Atom.</returns>
        </member>
        <member name="T:Cortex.Net.Core.ComputedValue`1">
            <summary>
            A node in the state dependency root that observes other nodes, and can be observed itself.
            </summary>
            <typeparam name="T">The type of the computed value.</typeparam>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.derivation">
            <summary>
            The derivation function to execute to get the value.
            </summary>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.setter">
            <summary>
            The optional setter function which can serve as the inverse function of the computed value.
            </summary>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.scope">
            <summary>
            The subject of the getter / setter.
            </summary>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.equalityComparer">
            <summary>
            The equality comparer that is used.
            </summary>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.keepAlive">
            <summary>
            A value indicating whether the computed value keeps calculating, even when it is not observed.
            </summary>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.requiresReaction">
            <summary>
            Indicates whether this computedValue requires a reactive context.
            </summary>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.isComputing">
            <summary>
            To check for evaluation cycles.
            </summary>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.isRunningSetter">
            <summary>
            To check for setter cycles.
            </summary>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.value">
            <summary>
            The computed value.
            </summary>
        </member>
        <member name="F:Cortex.Net.Core.ComputedValue`1.lastException">
            <summary>
            The last exception after accessing Value.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.ComputedValue`1.#ctor(Cortex.Net.ComputedValueOptions{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cortex.Net.Core.ComputedValue`1"/> class.
            </summary>
            <param name="options">An <see cref="T:Cortex.Net.ComputedValueOptions`1"/> instance that define the options for this computed value.</param>
        </member>
        <member name="E:Cortex.Net.Core.ComputedValue`1.BecomeObserved">
            <summary>
            Event that will fire after the <see cref="T:Cortex.Net.Core.Atom"/> has become observed.
            </summary>
        </member>
        <member name="E:Cortex.Net.Core.ComputedValue`1.BecomeUnobserved">
            <summary>
            Event that will fire after the observable has become unobserved.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.Observers">
            <summary>
            Gets the Observers.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.IsPendingUnobservation">
            <summary>
            Gets or sets a value indicating whether this atom is pending Unobservation.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.LastAccessedBy">
            <summary>
            Gets or sets the Id of the derivation run that last accessed this observable.
            If this Id equals the <see cref="P:Cortex.Net.IDerivation.RunId"/> of the current derivation
            the dependency is already established.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.IsBeingObserved">
            <summary>
            Gets or sets a value indicating whether the observable is being observed.
            An observable is being observed when at least one derivation actually accesses its
            value.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.LowestObserverState">
            <summary>
            Gets or sets the lowest <see cref="T:Cortex.Net.DerivationState"/> on any of it's observers.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.Name">
            <summary>
            Gets the Name of the <see cref="T:Cortex.Net.Core.Atom"/> instance.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.SharedState">
            <summary>
            Gets the Shared State of all the nodes in the dependency graph.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.DependenciesState">
            <summary>
            Gets or sets the state of the dependencies of this <see cref="T:Cortex.Net.IDerivation"/> instance.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.RunId">
            <summary>
            Gets or sets the id of the current run of a derivation. Each time the derivation is tracked
            this number is increased by one. This number is unique within the current shared state.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.Observing">
            <summary>
            Gets a set of <see cref="T:Cortex.Net.IObservable"/> instances that are currently observed.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.NewObserving">
            <summary>
            Gets a set of <see cref="T:Cortex.Net.IObservable"/> instances that have been hit during a new derivation run.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.IsTracing">
            <summary>
            Gets or sets the trace mode of this Derivation.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.RequiresObservable">
            <summary>
            Gets a value indicating whether to warn if this derivation is required to visit at least one observable.
            </summary>
        </member>
        <member name="P:Cortex.Net.Core.ComputedValue`1.Value">
            <summary>
            Gets or sets the underlying value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a cycle in computation is detected or when an inner exception is thrown by one of the referenced observables.</exception>
        </member>
        <member name="M:Cortex.Net.Core.ComputedValue`1.OnBecomeObserved">
            <summary>
            Method that triggers event <see cref="E:Cortex.Net.Core.ComputedValue`1.BecomeObserved"/>.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.ComputedValue`1.OnBecomeUnobserved">
            <summary>
            Method that triggers event <see cref="E:Cortex.Net.Core.ComputedValue`1.BecomeUnobserved"/>.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.ComputedValue`1.OnBecomeStale">
            <summary>
            Propagates confirmation of a possible change to all observers of
            this <see cref="T:Cortex.Net.Core.ComputedValue`1"/> for delayed computation.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.ComputedValue`1.Suspend">
            <summary>
            Suspends computation of this computed value when the last observer leaves.
            Computed values are automatically teared down when the last observer leaves.
            This process happens recursively, this computed might be the last observabe of another, etc.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.ComputedValue`1.TrackAndCompute">
            <summary>
            Track computed value by calling the getter.
            </summary>
            <returns>Whether the value has changed.</returns>
        </member>
        <member name="M:Cortex.Net.Core.ComputedValue`1.ComputeValue(System.Boolean)">
            <summary>
            Computes a value.
            </summary>
            <param name="track">Track this derived function.</param>
            <returns>The value or an exception.</returns>
        </member>
        <member name="M:Cortex.Net.Core.ComputedValue`1.WarnAboutUntrackedRead">
            <summary>
            Warn about an untracked read of this computed value.
            </summary>
        </member>
        <member name="T:Cortex.Net.Core.DerivationExtensions">
            <summary>
            Extension methods for <see cref="T:Cortex.Net.IDerivation"/> interface implementations.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.DerivationExtensions.ShouldCompute(Cortex.Net.IDerivation,System.Action)">
            <summary>
            Checks whether the <see cref="T:Cortex.Net.IDerivation"/>instance should recompute itself.
            </summary>
            <param name="derivation">The derivation.</param>
            <param name="action">The action to use to determine whether this derivation should compute.</param>
            <returns>True when it needs to recompute, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">When any of the arguments is null.</exception>
            <remarks>Might throw any other exception that a getter for <see cref="T:Cortex.Net.IObservable"/> will thow.</remarks>
        </member>
        <member name="M:Cortex.Net.Core.DerivationExtensions.TrackDerivedFunction``1(Cortex.Net.IDerivation,System.Func{``0})">
            <summary>
            Executes the provided function and tracks which observables are being accessed.
            The tracking information is stored on the <see cref="T:Cortex.Net.IDerivation"/> instance and the derivation is registered
            as observer of any of the accessed observables.
            </summary>
            <typeparam name="T">The return type of the function.</typeparam>
            <param name="derivation">The derivation to use.</param>
            <param name="function">The function to execute.</param>
            <returns>A tuple containing the return value of the function or an Exception.</returns>
        </member>
        <member name="M:Cortex.Net.Core.DerivationExtensions.ClearObserving(Cortex.Net.IDerivation)">
            <summary>
            Cleans the Observing collection with notification of the observables.
            </summary>
            <param name="derivation">The derivation to clean.</param>
        </member>
        <member name="M:Cortex.Net.Core.DerivationExtensions.BindDependencies(Cortex.Net.IDerivation)">
            <summary>
            Binds the new tracked Dependencies on the <see cref="T:Cortex.Net.IDerivation"/> instance.
            </summary>
            <param name="derivation">The derivation to use.</param>
            <exception cref="T:System.InvalidOperationException">When the state of the derivation's dependencies is Not tracking.</exception>
            <exception cref="T:System.NullReferenceException">When the newObserving set is null.</exception>
        </member>
        <member name="M:Cortex.Net.Core.DerivationExtensions.WarnWithoutDependencies(Cortex.Net.IDerivation)">
            <summary>
            Warn about dependencies without derivations.
            </summary>
            <param name="derivation">The derivation to check.</param>
        </member>
        <member name="M:Cortex.Net.Core.DerivationExtensions.ChangeLowestObserverStateOnObservablesToUpToDate(Cortex.Net.IDerivation)">
            <summary>
            Changes the <see cref="P:Cortex.Net.IObservable.LowestObserverState"/> ona ll <see cref="P:Cortex.Net.IDerivation.Observing"/> to <see cref="F:Cortex.Net.DerivationState.UpToDate"/>
            when this derivation changes to <see cref="F:Cortex.Net.DerivationState.UpToDate"/>.
            </summary>
            <param name="derivation">The derivation to use.</param>
        </member>
        <member name="T:Cortex.Net.Core.ObservableExtensions">
            <summary>
            Extension methods for the <see cref="T:Cortex.Net.IObservable"/> interface.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.HasObservers(Cortex.Net.IObservable)">
            <summary>
            Indicates whether the observable has Observers or not.
            </summary>
            <param name="observable">The observable to check for observers.</param>
            <returns>A boolean indicating whether the observable has observers or not.</returns>
            <exception cref="T:System.ArgumentNullException">When any of the arguments is null.</exception>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.AddObserver(Cortex.Net.IObservable,Cortex.Net.IDerivation)">
            <summary>
            Adds an observer that implements <see cref="T:Cortex.Net.IDerivation"/> into the set of observers.
            for this <see cref="T:Cortex.Net.IObservable"/> instance.
            </summary>
            <param name="observable">The observable to use.</param>
            <param name="derivation">The observer to add.</param>
            <exception cref="T:System.ArgumentNullException">When any of the arguments is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the derivation is in the not tracking state.</exception>
            <exception cref="T:System.InvalidOperationException">When the derivation was already added.</exception>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.RemoveObserver(Cortex.Net.IObservable,Cortex.Net.IDerivation)">
            <summary>
            Removes an Observer <see cref="T:Cortex.Net.IDerivation"/> from the set of observers.
            </summary>
            <param name="observable">The observable to use.</param>
            <param name="derivation">The observer to add.</param>
            <exception cref="T:System.ArgumentNullException">When any of the arguments is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when shared state is not in batch mode.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the derivation is not in the set of observers.</exception>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.ReportObserved(Cortex.Net.IObservable)">
            <summary>
            Report an observable as being observed to the current tracking
            derivation (observer).
            </summary>
            <param name="observable">The observable.</param>
            <returns>True when this observable is added to the "new observing" set of the derivation.</returns>
            <exception cref="T:System.ArgumentNullException">When any of the arguments is null.</exception>
            <remarks>This method will write to the debug log when state reads are currently not allowed.</remarks>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.PropagateChanged(Cortex.Net.IObservable)">
            <summary>
            Propagates a change to all observers of this observable.
            </summary>
            <param name="observable">The observable.</param>
            <exception cref="T:System.ArgumentNullException">When any of the arguments is null.</exception>
            <remarks>Called by Atom when its value has changed.</remarks>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.PropagateChangeConfirmed(Cortex.Net.IObservable)">
            <summary>
            Propagates confirmation of a change to all observers of this observable.
            </summary>
            <param name="observable">The observable.</param>
            <exception cref="T:System.ArgumentNullException">When any of the arguments is null.</exception>
            <remarks>Called by ComputedValue when it recalculate and its value changed.</remarks>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.PropagateMaybeChanged(Cortex.Net.IObservable)">
            <summary>
            Propagates confirmation of a possible change to all observers of
            this observable for delayed computation.
            </summary>
            <param name="observable">The observable.</param>
            <exception cref="T:System.ArgumentNullException">When any of the arguments is null.</exception>
            <remarks>
            Called by ComputedValue when its dependency changed,
            but we don't wan't to immediately recompute.
            </remarks>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.IsDerivation(Cortex.Net.IObservable)">
            <summary>
            Checks whether the observable is a derivation as well.
            </summary>
            <param name="observable">The observable to check.</param>
            <returns>True if the observable is a derivation, false otherwise.</returns>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.QueueForUnobservation(Cortex.Net.IObservable)">
            <summary>
            Queues an observable for global unobservation.
            </summary>
            <param name="observable">The observable to queue.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the observable still has observers.</exception>
        </member>
        <member name="M:Cortex.Net.Core.ObservableExtensions.CheckIfStateReadsAreAllowed(Cortex.Net.IObservable)">
            <summary>
            Checks if State reads are allowed and writes a warning to the Trace log.
            </summary>
            <param name="observable">The observable to report.</param>
        </member>
        <member name="T:Cortex.Net.Core.SharedStateExtensions">
            <summary>
            Extensions class for <see cref="T:Cortex.Net.ISharedState"/> instances.
            </summary>
        </member>
        <member name="M:Cortex.Net.Core.SharedStateExtensions.Untracked``1(Cortex.Net.ISharedState,System.Func{``0})">
            <summary>
            Executes a function without tracking derivations.
            </summary>
            <typeparam name="T">The type of the return value of the function.</typeparam>
            <param name="sharedState">The <see cref="T:Cortex.Net.ISharedState"/> instance to use to temporarily stop tracking derivations.</param>
            <param name="func">The function to execute.</param>
            <returns>The return value.</returns>
        </member>
        <member name="T:Cortex.Net.CortexConfiguration">
            <summary>
            Configuration parameters for an <see cref="T:Cortex.Net.ISharedState"/> instance.
            </summary>
        </member>
        <member name="P:Cortex.Net.CortexConfiguration.DisableErrorBoundaries">
            <summary>
            Gets a value indicating whether to catch and rethrow exceptions.
            This is useful for inspecting the state of the stack when an exception occurs while debugging.
            </summary>
            <remarks>
            Enabling this setting makes it possible for the graph to be left in
            an inconsistent state. Do not enable this in production.
            </remarks>
        </member>
        <member name="P:Cortex.Net.CortexConfiguration.ObservableRequiresReaction">
            <summary>
            Gets a value indicating whether to warn if observables are accessed outside a reactive context.
            </summary>
        </member>
        <member name="P:Cortex.Net.CortexConfiguration.ReactionRequiresObservable">
            <summary>
            Gets a value indicating whether to warn if reactions are required to visit at least one observable.
            </summary>
        </member>
        <member name="P:Cortex.Net.CortexConfiguration.ComputedRequiresReaction">
            <summary>
            Gets a value indicating whether a <see cref="T:Cortex.Net.Core.ComputedValue`1"/> instance requires a reactive context.
            </summary>
        </member>
        <member name="T:Cortex.Net.DerivationState">
            <summary>
            The state of the <see cref="T:Cortex.Net.IDerivation"/> instance.
            </summary>
        </member>
        <member name="F:Cortex.Net.DerivationState.NotTracking">
            <summary>
            Before being run or (outside batch and not being observed).
            at this point derivation is not holding any data about dependency tree
            </summary>
        </member>
        <member name="F:Cortex.Net.DerivationState.UpToDate">
            <summary>
             No shallow dependency changed since last computation.
             We won't recalculate the derivation.
             This is what makes Cortex.Net fast.
            </summary>
        </member>
        <member name="F:Cortex.Net.DerivationState.PossiblyStale">
             <summary>
             Some deep dependency has changed, but we don't know if a shallow dependency has changed.
             This will require to check first if this derivation is UpToDate or PossiblyStale.
             Currently only ComputedValue will propagate PossiblyStale.
            
             Having this state is the second big optimization:
             We don't have to recompute on every dependency change, but only when it's necessary.
             </summary>
        </member>
        <member name="F:Cortex.Net.DerivationState.Stale">
            <summary>
            A shallow dependency has changed since last computation and the derivation
            will need to recompute when it's necessary next.
            </summary>
        </member>
        <member name="T:Cortex.Net.IAtom">
            <summary>
            Interface that defines an Atom.
            Atoms can be used to signal Cortex.Net that some observable data source has been observed or changed.
            And Cortex.Net will signal the atom whenever it is used or no longer in use.
            </summary>
        </member>
        <member name="M:Cortex.Net.IAtom.ReportObserved">
            <summary>
            Invoke this method to notify Cortex.Net that your atom has been used somehow.
            </summary>
            <returns>Returns true if there is currently a reactive context.</returns>
        </member>
        <member name="M:Cortex.Net.IAtom.ReportChanged">
            <summary>
            Invoke this method after this atom has changed to signal Cortex.Net that all its observers should invalidate.
            </summary>
        </member>
        <member name="T:Cortex.Net.IComputedValue`1">
            <summary>
            Interface for Computed values.
            </summary>
            <typeparam name="T">The type of the computed value.</typeparam>
        </member>
        <member name="P:Cortex.Net.IComputedValue`1.Value">
            <summary>
            Gets or sets the underlying value.
            </summary>
        </member>
        <member name="M:Cortex.Net.IComputedValue`1.Suspend">
            <summary>
            Suspends computation of this computed value when the last observer leaves.
            Computed values are automatically teared down when the last observer leaves.
            This process happens recursively, this computed might be the last observabe of another, etc.
            </summary>
        </member>
        <member name="T:Cortex.Net.IDependencyNode">
            <summary>
            Represents a Node in the dependency tree.
            </summary>
        </member>
        <member name="P:Cortex.Net.IDependencyNode.Name">
            <summary>
            Gets the Name of the <see cref="T:Cortex.Net.IDependencyNode"/> instance.
            </summary>
        </member>
        <member name="P:Cortex.Net.IDependencyNode.SharedState">
            <summary>
            Gets the Shared State of all the nodes in the dependency graph.
            </summary>
        </member>
        <member name="T:Cortex.Net.IDerivation">
            <summary>
            A derivation is a (computed) value that is derived from other (observable) values.
            </summary>
        </member>
        <member name="P:Cortex.Net.IDerivation.DependenciesState">
            <summary>
            Gets or sets the state of the dependencies of this <see cref="T:Cortex.Net.IDerivation"/> instance.
            </summary>
        </member>
        <member name="P:Cortex.Net.IDerivation.RunId">
            <summary>
            Gets or sets the id of the current run of a derivation. Each time the derivation is tracked
            this number is increased by one. This number is unique within the current shared state.
            </summary>
        </member>
        <member name="P:Cortex.Net.IDerivation.Observing">
            <summary>
            Gets a set of <see cref="T:Cortex.Net.IObservable"/> instances that are currently observed.
            </summary>
        </member>
        <member name="P:Cortex.Net.IDerivation.NewObserving">
            <summary>
            Gets a set of <see cref="T:Cortex.Net.IObservable"/> instances that have been hit during a new derivation run.
            </summary>
        </member>
        <member name="P:Cortex.Net.IDerivation.IsTracing">
            <summary>
            Gets or sets the trace mode of this Derivation.
            </summary>
        </member>
        <member name="P:Cortex.Net.IDerivation.RequiresObservable">
            <summary>
            Gets a value indicating whether to warn if this derivation is required to visit at least one observable.
            </summary>
        </member>
        <member name="M:Cortex.Net.IDerivation.OnBecomeStale">
            <summary>
            Method that is called when the <see cref="T:Cortex.Net.IDerivation"/> instance has become stale.
            </summary>
        </member>
        <member name="T:Cortex.Net.IObservable">
            <summary>
            Represents something that is Observable.
            </summary>
        </member>
        <member name="E:Cortex.Net.IObservable.BecomeObserved">
            <summary>
            Event that will fire after the observable has become observed.
            </summary>
        </member>
        <member name="E:Cortex.Net.IObservable.BecomeUnobserved">
            <summary>
            Event that will fire after the observable has become unobserved.
            </summary>
        </member>
        <member name="P:Cortex.Net.IObservable.Observers">
            <summary>
            Gets the Observers.
            </summary>
        </member>
        <member name="P:Cortex.Net.IObservable.IsPendingUnobservation">
            <summary>
            Gets or sets a value indicating whether this IObservable is pending Unobservation.
            </summary>
        </member>
        <member name="P:Cortex.Net.IObservable.LastAccessedBy">
            <summary>
            Gets or sets the Id of the derivation run that last accessed this observable.
            If this Id equals the <see cref="P:Cortex.Net.IDerivation.RunId"/> of the current derivation
            the dependency is already established.
            </summary>
        </member>
        <member name="P:Cortex.Net.IObservable.IsBeingObserved">
            <summary>
            Gets or sets a value indicating whether the observable is being observed.
            An observable is being observed when at least one derivation actually accesses its
            value.
            </summary>
        </member>
        <member name="P:Cortex.Net.IObservable.LowestObserverState">
            <summary>
            Gets or sets the lowest <see cref="T:Cortex.Net.DerivationState"/> on any of it's observers.
            </summary>
        </member>
        <member name="M:Cortex.Net.IObservable.OnBecomeObserved">
            <summary>
            Method that at least must be implented to trigger event <see cref="E:Cortex.Net.IObservable.BecomeObserved"/>.
            </summary>
        </member>
        <member name="M:Cortex.Net.IObservable.OnBecomeUnobserved">
            <summary>
            Method that at least must be implented to trigger event <see cref="E:Cortex.Net.IObservable.BecomeUnobserved"/>.
            </summary>
        </member>
        <member name="T:Cortex.Net.ISharedState">
            <summary>
            Interface that defines the Shared state that all nodes of the Dependency Graph share.
            </summary>
        </member>
        <member name="E:Cortex.Net.ISharedState.SpyEvent">
            <summary>
            Spy event that fires when any observable attached to this Shared State reports a significant change.
            Can be used to implement a state inspection tool or something like react-dev-tools.
            </summary>
        </member>
        <member name="P:Cortex.Net.ISharedState.PendingUnobservations">
            <summary>
            Gets a queue of all pending Unobservations.
            </summary>
        </member>
        <member name="P:Cortex.Net.ISharedState.InBatch">
            <summary>
            Gets a value indicating whether the Dependency Graph is in Batch mode.
            </summary>
        </member>
        <member name="P:Cortex.Net.ISharedState.Configuration">
            <summary>
            Gets the Configuration for the Shared State.
            </summary>
        </member>
        <member name="P:Cortex.Net.ISharedState.AllowStateReads">
            <summary>
            Gets a value indicating whether it is allowed to read observables at this point.
            </summary>
        </member>
        <member name="P:Cortex.Net.ISharedState.TrackingDerivation">
            <summary>
            Gets the <see cref="T:Cortex.Net.IDerivation"/> instance that the shared state is currently tracking.
            </summary>
        </member>
        <member name="P:Cortex.Net.ISharedState.RunId">
            <summary>
            Gets the shared derivation RunId counter.
            </summary>
        </member>
        <member name="P:Cortex.Net.ISharedState.ComputationDepth">
            <summary>
            Gets or sets the computation depth.
            </summary>
        </member>
        <member name="M:Cortex.Net.ISharedState.StartBatch">
            <summary>
            Starts a Batch.
            </summary>
            <remarks>
            This method can be called multiple times but should always be balanced with an equal amount of <see cref="M:Cortex.Net.ISharedState.EndBatch"/> calls.
            </remarks>
        </member>
        <member name="M:Cortex.Net.ISharedState.EndBatch">
            <summary>
            Ends a Batch.
            </summary>
            <remarks>
            This method can be called multiple times but should always be balanced with an equal amount of <see cref="M:Cortex.Net.ISharedState.StartBatch"/> calls.
            </remarks>
        </member>
        <member name="M:Cortex.Net.ISharedState.StartUntracked">
            <summary>
            Starts an untracked part of a derviation.
            </summary>
            <returns>The current derivation to restore later.</returns>
        </member>
        <member name="M:Cortex.Net.ISharedState.StartAllowStateReads(System.Boolean)">
            <summary>
            Start of a section where allowedStateReads is modified.
            </summary>
            <param name="allowStateReads">Whether to allow State reads.</param>
            <returns>The previous value.</returns>
        </member>
        <member name="M:Cortex.Net.ISharedState.IncrementRunId">
            <summary>
            Increments the RunId and returns the new value.
            </summary>
            <returns>The new RunId.</returns>
        </member>
        <member name="M:Cortex.Net.ISharedState.StartTracking(Cortex.Net.IDerivation)">
            <summary>
            Starts tracking the <see cref="T:Cortex.Net.IDerivation"/> instance given as paramteter.
            </summary>
            <param name="derivation">The derivation to track.</param>
            <returns>The prevous derivation.</returns>
        </member>
        <member name="M:Cortex.Net.ISharedState.EndTracking(Cortex.Net.IDerivation)">
            <summary>
            Ends tracking the current <see cref="T:Cortex.Net.IDerivation"/> instance and restores the previous derivation.
            </summary>
            <param name="previousDerivation">The previous derivation.</param>
        </member>
        <member name="M:Cortex.Net.ISharedState.EndAllowStateReads(System.Boolean)">
            <summary>
            End of a section where allowedStateReads is modified.
            </summary>
            <param name="previousAllowStateReads">The previous value to restore.</param>
        </member>
        <member name="M:Cortex.Net.ISharedState.OnSpy(System.Object,Cortex.Net.Spy.SpyEventArgs)">
            <summary>
            Triggers the Spy event handler with the specified event args.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="spyEventArgs">The event arguments for the spy event.</param>
        </member>
        <member name="T:Cortex.Net.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.AlreadyAddedObserverToObservable">
            <summary>
              Looks up a localized string similar to The derivation ({0}) was already added to the set of observers of observable ({1}).
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.BindDependenciesExpectsStateNonEqual">
            <summary>
              Looks up a localized string similar to BindDependencies expects a DependenciesState != ({0}).
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.CannotAssignComputedValue">
            <summary>
              Looks up a localized string similar to It is not possible to assign a new value to this computed value ({0}).
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.CanOnlyAddTrackedDependencies">
            <summary>
              Looks up a localized string similar to Only tracking IDerivation instances can be added with a DependenciesState != ({0}).
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.CaughtExceptionDuringGet">
            <summary>
              Looks up a localized string similar to Caught an exception during a get operation. Inspect the inner exception for details..
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.CycleDetectedInComputation">
            <summary>
              Looks up a localized string similar to Cycle detected in computation ({0}): {1}.
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.CycleDetectedInSetter">
            <summary>
              Looks up a localized string similar to The setter of computed value ({0}) is trying to update itself. Did you intend to update an observable value instead of a computed value?.
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.GetExpressionNull">
            <summary>
              Looks up a localized string similar to Get expression is null for ({0}) of type ({1}).
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.GlobalUnobservationOnlyWithoutObservers">
            <summary>
              Looks up a localized string similar to Global unobservation should only be queued without observers..
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.IsNull">
            <summary>
              Looks up a localized string similar to ({0}) is null..
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.ObserverNotInObservable">
            <summary>
              Looks up a localized string similar to The derivation ({0}) does not exist in the set of observers of observable ({1}).
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.OnlyInBatch">
            <summary>
              Looks up a localized string similar to ({0}) should only be called when the shared state is in batch mode..
            </summary>
        </member>
        <member name="P:Cortex.Net.Properties.Resources.ReadOutsideReaction">
            <summary>
              Looks up a localized string similar to ({0}) is read outside a reactive context..
            </summary>
        </member>
        <member name="T:Cortex.Net.SharedState">
            <summary>
            Holds the Shared state that all nodes of the Dependency Graph share.
            </summary>
        </member>
        <member name="F:Cortex.Net.SharedState.batchCount">
            <summary>
            Batch counter to support reentrance of Start and EndBatch.
            </summary>
        </member>
        <member name="F:Cortex.Net.SharedState.uniqueId">
            <summary>
            A unique Id that is incremented and used to identify instances.
            </summary>
        </member>
        <member name="M:Cortex.Net.SharedState.#ctor(Cortex.Net.CortexConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Cortex.Net.SharedState"/> class.
            </summary>
            <param name="configuration">The configuration to initialize <see cref="T:Cortex.Net.SharedState"/> instance with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the arguments is null.</exception>
        </member>
        <member name="E:Cortex.Net.SharedState.SpyEvent">
            <summary>
            Spy event that fires when any observable attached to this Shared State reports a significant change.
            Can be used to implement a state inspection tool or something like react-dev-tools.
            </summary>
        </member>
        <member name="P:Cortex.Net.SharedState.PendingUnobservations">
            <summary>
            Gets a queue of all pending Unobservations.
            </summary>
        </member>
        <member name="P:Cortex.Net.SharedState.InBatch">
            <summary>
            Gets a value indicating whether the Dependency Graph is in Batch mode.
            </summary>
        </member>
        <member name="P:Cortex.Net.SharedState.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:Cortex.Net.SharedState.AllowStateReads">
            <summary>
            Gets or sets a value indicating whether it is allowed to read observables at this point.
            </summary>
        </member>
        <member name="P:Cortex.Net.SharedState.TrackingDerivation">
            <summary>
            Gets the <see cref="T:Cortex.Net.IDerivation"/> instance that the shared state is currently tracking.
            </summary>
        </member>
        <member name="P:Cortex.Net.SharedState.RunId">
            <summary>
            Gets the shared derivation RunId counter.
            </summary>
        </member>
        <member name="P:Cortex.Net.SharedState.ComputationDepth">
            <summary>
            Gets or sets the computation depth.
            </summary>
        </member>
        <member name="M:Cortex.Net.SharedState.StartBatch">
            <summary>
            Starts a Batch.
            </summary>
            <remarks>
            This method can be called multiple times but should always be balanced with an equal amount of <see cref="M:Cortex.Net.SharedState.EndBatch"/> calls.
            </remarks>
        </member>
        <member name="M:Cortex.Net.SharedState.EndBatch">
            <summary>
            Ends a Batch.
            </summary>
            <remarks>
            This method can be called multiple times but should always be balanced with an equal amount of <see cref="M:Cortex.Net.SharedState.StartBatch"/> calls.
            </remarks>
        </member>
        <member name="M:Cortex.Net.SharedState.StartUntracked">
            <summary>
            Starts an untracked part of a derviation.
            </summary>
            <returns>The current derivation to restore later.</returns>
        </member>
        <member name="M:Cortex.Net.SharedState.StartAllowStateReads(System.Boolean)">
            <summary>
            Start of a section where allowedStateReads is modified.
            </summary>
            <param name="allowStateReads">Whether to allow State reads.</param>
            <returns>The previous value.</returns>
        </member>
        <member name="M:Cortex.Net.SharedState.IncrementRunId">
            <summary>
            Increments the RunId and returns the new value.
            </summary>
            <returns>The new RunId.</returns>
        </member>
        <member name="M:Cortex.Net.SharedState.StartTracking(Cortex.Net.IDerivation)">
            <summary>
            Starts tracking the <see cref="T:Cortex.Net.IDerivation"/> instance given as paramteter.
            </summary>
            <param name="derivation">The derivation to track.</param>
            <returns>The prevous derivation.</returns>
        </member>
        <member name="M:Cortex.Net.SharedState.EndTracking(Cortex.Net.IDerivation)">
            <summary>
            Ends tracking the current <see cref="T:Cortex.Net.IDerivation"/> instance and restores the previous derivation.
            </summary>
            <param name="previousDerivation">The previous derivation.</param>
        </member>
        <member name="M:Cortex.Net.SharedState.EndAllowStateReads(System.Boolean)">
            <summary>
            End of a section where allowedStateReads is modified.
            </summary>
            <param name="previousAllowStateReads">The previous value to restore.</param>
        </member>
        <member name="M:Cortex.Net.SharedState.CreateAtom(System.String,System.Action,System.Action)">
            <summary>
            Creates a new Atom that references this shared Storage.
            </summary>
            <param name="name">The name for this Atom. A unique name will be generated in case a name is not provided.</param>
            <param name="onBecomeObserved">An <see cref="T:System.Action"/> that will be executed when the Atom changes from unobserved to observed.</param>
            <param name="onBecomeUnobserved">An <see cref="T:System.Action"/> that will be executed when the Atom changes from observed to unobserved.</param>
            <returns>A new instance that implements <see cref="T:Cortex.Net.IAtom"/>.</returns>
        </member>
        <member name="M:Cortex.Net.SharedState.OnSpy(System.Object,Cortex.Net.Spy.SpyEventArgs)">
            <summary>
            Triggers the Spy event handler with the specified event args.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="spyEventArgs">The event arguments for the spy event.</param>
        </member>
        <member name="T:Cortex.Net.Spy.ComputedSpyEventArgs">
            <summary>
            Event argument class for a spy event of a Computed Value.
            </summary>
        </member>
        <member name="P:Cortex.Net.Spy.ComputedSpyEventArgs.Context">
            <summary>
            Gets or sets the context of the spy event.
            </summary>
        </member>
        <member name="P:Cortex.Net.Spy.ComputedSpyEventArgs.Name">
            <summary>
            Gets or sets the name of the ComputedValue.
            </summary>
        </member>
        <member name="T:Cortex.Net.Spy.SpyEventArgs">
            <summary>
            Base class for Spy Events.
            </summary>
        </member>
        <member name="T:Cortex.Net.TraceMode">
            <summary>
            Mode for tracing.
            </summary>
        </member>
        <member name="F:Cortex.Net.TraceMode.None">
            <summary>
            Do not trace dependency graph.
            </summary>
        </member>
        <member name="F:Cortex.Net.TraceMode.Log">
            <summary>
            Log relevant info to trace listeners.
            </summary>
        </member>
        <member name="F:Cortex.Net.TraceMode.Break">
            <summary>
            Log relevant info and trigger a breakpoint to an attached debugger.
            </summary>
        </member>
    </members>
</doc>
