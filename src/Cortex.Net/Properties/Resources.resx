<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionNameNull" xml:space="preserve">
    <value>[Cortex.Net] Actions should have valid names, got nothing, autogenerating name.</value>
  </data>
  <data name="AlreadyAddedObserverToObservable" xml:space="preserve">
    <value>The derivation ({0}) was already added to the set of observers of observable ({1})</value>
  </data>
  <data name="BindDependenciesExpectsStateNonEqual" xml:space="preserve">
    <value>BindDependencies expects a DependenciesState != ({0})</value>
  </data>
  <data name="CannotAssignComputedValue" xml:space="preserve">
    <value>It is not possible to assign a new value to this computed value ({0})</value>
  </data>
  <data name="CannotTraceNotObservable" xml:space="preserve">
    <value>Cannot trace an object that is not an observable Object.</value>
  </data>
  <data name="CanOnlyAddTrackedDependencies" xml:space="preserve">
    <value>Only tracking IDerivation instances can be added with a DependenciesState != ({0})</value>
  </data>
  <data name="CaughtExceptionDuringGet" xml:space="preserve">
    <value>Caught an exception during a get operation. Inspect the inner exception for details.</value>
  </data>
  <data name="ComputedValuesAreNotAllowedToCauseSideEffects" xml:space="preserve">
    <value>Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: ({0})</value>
  </data>
  <data name="CycleDetectedInComputation" xml:space="preserve">
    <value>Cycle detected in computation ({0}): {1}</value>
  </data>
  <data name="CycleDetectedInSetter" xml:space="preserve">
    <value>The setter of computed value ({0}) is trying to update itself. Did you intend to update an observable value instead of a computed value?</value>
  </data>
  <data name="GetExpressionNull" xml:space="preserve">
    <value>Get expression is null for ({0}) of type ({1})</value>
  </data>
  <data name="GlobalUnobservationOnlyWithoutObservers" xml:space="preserve">
    <value>Global unobservation should only be queued without observers.</value>
  </data>
  <data name="InvalidActionStack" xml:space="preserve">
    <value>Invalid action stack. did you forget to finish an action?</value>
  </data>
  <data name="InvalidatedDueToChange" xml:space="preserve">
    <value>[Cortex.Net] ({0}) is invalidated due to change in ({1})</value>
  </data>
  <data name="IsNull" xml:space="preserve">
    <value>({0}) is null.</value>
  </data>
  <data name="ModifiedOutsideAction" xml:space="preserve">
    <value>Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ({0})</value>
  </data>
  <data name="ModifiedOutsideActionEnforceAlways" xml:space="preserve">
    <value>"Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: ({0})</value>
  </data>
  <data name="ObserverNotInObservable" xml:space="preserve">
    <value>The derivation ({0}) does not exist in the set of observers of observable ({1})</value>
  </data>
  <data name="OnlyInBatch" xml:space="preserve">
    <value>({0}) should only be called when the shared state is in batch mode.</value>
  </data>
  <data name="PropertyOrMethodAlreadyExistOnObservableObject" xml:space="preserve">
    <value>Property or method with name ({0}) allready exists on object with name ({1})</value>
  </data>
  <data name="PropertyOrMethodNotFoundOnObservableObject" xml:space="preserve">
    <value>Property or method with name ({0}) not found on object with name ({1})</value>
  </data>
  <data name="ProvidedExpressionNoMemberExpression" xml:space="preserve">
    <value>Provided expression ({0}) to trace is not a member expression.</value>
  </data>
  <data name="ProvidedMemberNoDerivation" xml:space="preserve">
    <value>The provided member with name ({0}) is no derivation (like a reaction or a computed value)</value>
  </data>
  <data name="ReactionDoesNotConverge" xml:space="preserve">
    <value>Reaction doesn't converge to a stable state after ({0}) iterations. Probably there is a cycle in the reactive function: ({1})</value>
  </data>
  <data name="ReadOutsideReaction" xml:space="preserve">
    <value>[Cortex.Net] ({0}) is read outside a reactive context.</value>
  </data>
  <data name="ReadOutsideReactionRecompute" xml:space="preserve">
    <value>[Cortex.Net] ({0}) is read outside a reactive context. Doing full recompute.</value>
  </data>
</root>